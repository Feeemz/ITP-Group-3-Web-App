{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: 'Calendar',\n  data: function data() {\n    return {\n      selectedDate: null,\n      daysOfWeek: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      weeks: []\n    };\n  },\n  methods: {\n    isToday: function isToday(date) {\n      var today = new Date();\n      return date.toDateString() === today.toDateString();\n    },\n    isSelected: function isSelected(date) {\n      var _this$selectedDate;\n      return date.toDateString() === ((_this$selectedDate = this.selectedDate) === null || _this$selectedDate === void 0 ? void 0 : _this$selectedDate.toDateString());\n    },\n    selectDate: function selectDate(date) {\n      this.selectedDate = date;\n      this.$emit('select-date', date);\n    }\n  },\n  mounted: function mounted() {\n    var today = new Date();\n    var startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n    var endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n    var daysInMonth = endOfMonth.getDate();\n    var dayOfWeek = startOfMonth.getDay();\n    var date = 1;\n    var week = [];\n    for (var i = 0; i < 7; i++) {\n      if (i < dayOfWeek) {\n        week.push(null);\n      } else {\n        week.push(new Date(today.getFullYear(), today.getMonth(), date));\n        date++;\n      }\n    }\n    this.weeks.push(week);\n    while (date <= daysInMonth) {\n      week = [];\n      for (var _i = 0; _i < 7; _i++) {\n        if (date > daysInMonth) {\n          week.push(null);\n        } else {\n          week.push(new Date(today.getFullYear(), today.getMonth(), date));\n          date++;\n        }\n      }\n      this.weeks.push(week);\n    }\n  }\n};","map":{"version":3,"names":["name","data","selectedDate","daysOfWeek","weeks","methods","isToday","date","today","Date","toDateString","isSelected","_this$selectedDate","selectDate","$emit","mounted","startOfMonth","getFullYear","getMonth","endOfMonth","daysInMonth","getDate","dayOfWeek","getDay","week","i","push"],"sources":["src/views/Calendar.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <nav class=\"navbar\">\r\n      <div class=\"navbar-logo\">\r\n        <router-link to=\"/Home\">\r\n          <img src=\"../assets/logo.jpg\" alt=\"Logo\" width=\"120\" height=\"50\" style=\"margin-left: 50px;\">\r\n        </router-link>  \r\n      </div>\r\n      <div class=\"navbar-links\">\r\n        <router-link to=\"/Home\" class=\"nav-link\">Home</router-link>\r\n        <router-link to=\"/Calendar\" class=\"nav-link\">Calendar</router-link>\r\n        <router-link to=\"/Login\" class=\"nav-link\">Logout</router-link>\r\n      </div>\r\n    </nav>\r\n    <!-- Contents of Cal  -->\r\n    \r\n    <div class=\"background-square\">\r\n      <br>\r\n      <h1>Calendar</h1>\r\n      <br>\r\n      <div class=\"calendar-nav\">\r\n        <button> Prev </button>\r\n        <h2>July</h2>\r\n        <button></button>\r\n      </div>\r\n      <table class=\"calendar\">\r\n        <thead>\r\n          <tr>\r\n            <th v-for=\"day in daysOfWeek\">{{ day }}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"(week, index) in weeks\" :key=\"index\">\r\n            <td v-for=\"day in week\" :class=\"{ today: isToday(day), selected: isSelected(day) }\" @click=\"selectDate(day)\">\r\n              {{ day.getDate() }}\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n\r\n\r\n\r\n\r\n    </div>   \r\n      \r\n      <!-- Rest of your content here -->\r\n    \r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'Calendar',\r\n  data() {\r\n    return {\r\n      selectedDate: null,\r\n      daysOfWeek: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n      weeks: []\r\n    }\r\n  },\r\n  methods: {\r\n    isToday(date) {\r\n      const today = new Date()\r\n      return date.toDateString() === today.toDateString()\r\n    },\r\n    isSelected(date) {\r\n      return date.toDateString() === this.selectedDate?.toDateString()\r\n    },\r\n    selectDate(date) {\r\n      this.selectedDate = date\r\n      this.$emit('select-date', date)\r\n    }\r\n  },\r\n  mounted() {\r\n    const today = new Date()\r\n    const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1)\r\n    const endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0)\r\n    const daysInMonth = endOfMonth.getDate()\r\n    const dayOfWeek = startOfMonth.getDay()\r\n\r\n    let date = 1\r\n    let week = []\r\n    for (let i = 0; i < 7; i++) {\r\n      if (i < dayOfWeek) {\r\n        week.push(null)\r\n      } else {\r\n        week.push(new Date(today.getFullYear(), today.getMonth(), date))\r\n        date++\r\n      }\r\n    }\r\n    this.weeks.push(week)\r\n\r\n    while (date <= daysInMonth) {\r\n      week = []\r\n      for (let i = 0; i < 7; i++) {\r\n        if (date > daysInMonth) {\r\n          week.push(null)\r\n        } else {\r\n          week.push(new Date(today.getFullYear(), today.getMonth(), date))\r\n          date++\r\n        }\r\n      }\r\n      this.weeks.push(week)\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n.calendar {\r\n  border-collapse: collapse;\r\n  width: 100%;\r\n}\r\n\r\n.calendar td {\r\n  border: 1px solid #ccc;\r\n  padding: 10px;\r\n  text-align: center;\r\n}\r\n\r\n.calendar td.today {\r\n  font-weight: bold;\r\n}\r\n\r\n.calendar td.selected {\r\n  background-color: #007bff;\r\n  color: #fff;\r\n}\r\n\r\n.calendar td:hover {\r\n  cursor: pointer;\r\n  background-color: #f0f0f0;\r\n}\r\n</style>"],"mappings":";AAmDA;EACAA,IAAA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,YAAA;MACAC,UAAA;MACAC,KAAA;IACA;EACA;EACAC,OAAA;IACAC,OAAA,WAAAA,QAAAC,IAAA;MACA,IAAAC,KAAA,OAAAC,IAAA;MACA,OAAAF,IAAA,CAAAG,YAAA,OAAAF,KAAA,CAAAE,YAAA;IACA;IACAC,UAAA,WAAAA,WAAAJ,IAAA;MAAA,IAAAK,kBAAA;MACA,OAAAL,IAAA,CAAAG,YAAA,SAAAE,kBAAA,QAAAV,YAAA,cAAAU,kBAAA,uBAAAA,kBAAA,CAAAF,YAAA;IACA;IACAG,UAAA,WAAAA,WAAAN,IAAA;MACA,KAAAL,YAAA,GAAAK,IAAA;MACA,KAAAO,KAAA,gBAAAP,IAAA;IACA;EACA;EACAQ,OAAA,WAAAA,QAAA;IACA,IAAAP,KAAA,OAAAC,IAAA;IACA,IAAAO,YAAA,OAAAP,IAAA,CAAAD,KAAA,CAAAS,WAAA,IAAAT,KAAA,CAAAU,QAAA;IACA,IAAAC,UAAA,OAAAV,IAAA,CAAAD,KAAA,CAAAS,WAAA,IAAAT,KAAA,CAAAU,QAAA;IACA,IAAAE,WAAA,GAAAD,UAAA,CAAAE,OAAA;IACA,IAAAC,SAAA,GAAAN,YAAA,CAAAO,MAAA;IAEA,IAAAhB,IAAA;IACA,IAAAiB,IAAA;IACA,SAAAC,CAAA,MAAAA,CAAA,MAAAA,CAAA;MACA,IAAAA,CAAA,GAAAH,SAAA;QACAE,IAAA,CAAAE,IAAA;MACA;QACAF,IAAA,CAAAE,IAAA,KAAAjB,IAAA,CAAAD,KAAA,CAAAS,WAAA,IAAAT,KAAA,CAAAU,QAAA,IAAAX,IAAA;QACAA,IAAA;MACA;IACA;IACA,KAAAH,KAAA,CAAAsB,IAAA,CAAAF,IAAA;IAEA,OAAAjB,IAAA,IAAAa,WAAA;MACAI,IAAA;MACA,SAAAC,EAAA,MAAAA,EAAA,MAAAA,EAAA;QACA,IAAAlB,IAAA,GAAAa,WAAA;UACAI,IAAA,CAAAE,IAAA;QACA;UACAF,IAAA,CAAAE,IAAA,KAAAjB,IAAA,CAAAD,KAAA,CAAAS,WAAA,IAAAT,KAAA,CAAAU,QAAA,IAAAX,IAAA;UACAA,IAAA;QACA;MACA;MACA,KAAAH,KAAA,CAAAsB,IAAA,CAAAF,IAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}