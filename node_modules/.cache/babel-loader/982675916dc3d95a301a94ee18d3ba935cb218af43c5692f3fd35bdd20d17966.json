{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.concat.js\";\nexport default {\n  data: function data() {\n    return {\n      currentYear: new Date().getFullYear(),\n      currentMonth: new Date().getMonth(),\n      monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n      weeks: [],\n      selectedDay: null\n    };\n  },\n  mounted: function mounted() {\n    this.updateTable();\n  },\n  methods: {\n    updateTable: function updateTable() {\n      var daysInMonth = new Date(this.currentYear, this.currentMonth + 1, 0).getDate();\n      var firstDayOfMonth = new Date(this.currentYear, this.currentMonth, 1).getDay();\n      var lastDayOfMonth = new Date(this.currentYear, this.currentMonth, daysInMonth).getDay();\n      var weeks = [[]];\n      var currentWeek = 0;\n      var currentDay = 1;\n      for (var i = 0; i < firstDayOfMonth; i++) {\n        weeks[currentWeek].push(null);\n      }\n      while (currentDay <= daysInMonth) {\n        if (weeks[currentWeek].length === 7) {\n          currentWeek++;\n          weeks.push([]);\n        }\n        weeks[currentWeek].push(currentDay);\n        currentDay++;\n      }\n      for (var _i = lastDayOfMonth; _i < 6; _i++) {\n        weeks[currentWeek].push(null);\n      }\n      this.weeks = weeks;\n    },\n    prevMonth: function prevMonth() {\n      this.currentMonth = (this.currentMonth - 1 + 12) % 12;\n      if (this.currentMonth === 11) {\n        this.currentYear--;\n      }\n      this.updateTable();\n    },\n    nextMonth: function nextMonth() {\n      this.currentMonth = (this.currentMonth + 1) % 12;\n      if (this.currentMonth === 0) {\n        this.currentYear++;\n      }\n      this.updateTable();\n    },\n    handleDayClick: function handleDayClick(day) {\n      if (day === null) {\n        return;\n      }\n      this.selectedDay = day;\n      console.log(\"You clicked day \".concat(day, \" in month \").concat(this.currentMonth));\n      // Add your own logic to update the UI or perform other actions based on the clicked day and month\n    }\n  }\n};","map":{"version":3,"names":["data","currentYear","Date","getFullYear","currentMonth","getMonth","monthNames","weeks","selectedDay","mounted","updateTable","methods","daysInMonth","getDate","firstDayOfMonth","getDay","lastDayOfMonth","currentWeek","currentDay","i","push","length","prevMonth","nextMonth","handleDayClick","day","console","log","concat"],"sources":["src/views/Attendance.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    \r\n    <table>\r\n      <div>\r\n      <button class=\"prev-btn\" @click=\"prevMonth\">Prev</button>\r\n      <button class=\"next-btn\" @click=\"nextMonth\">Next</button>\r\n    </div>\r\n      <thead>\r\n        <tr>\r\n          <th colspan=\"7\">{{ monthNames[currentMonth] }} {{ currentYear }}</th>\r\n        </tr>\r\n        <tr>\r\n          <th>Sun</th>\r\n          <th>Mon</th>\r\n          <th>Tue</th>\r\n          <th>Wed</th>\r\n          <th>Thu</th>\r\n          <th>Fri</th>\r\n          <th>Sat</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(week, index) in weeks\" :key=\"index\">\r\n          <td v-for=\"(day, index) in week\" :key=\"index\">\r\n            <button class=\"day-btn\" :id=\"'day-' + day + '-' + currentMonth\" @click=\"handleDayClick(day)\">{{ day }}</button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    \r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      currentYear: new Date().getFullYear(),\r\n      currentMonth: new Date().getMonth(),\r\n      monthNames: [\r\n        'January', 'February', 'March', 'April', 'May', 'June',\r\n        'July', 'August', 'September', 'October', 'November', 'December',\r\n      ],\r\n      weeks: [],\r\n      selectedDay: null,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.updateTable();\r\n  },\r\n  methods: {\r\n    updateTable() {\r\n      const daysInMonth = new Date(this.currentYear, this.currentMonth + 1, 0).getDate();\r\n      const firstDayOfMonth = new Date(this.currentYear, this.currentMonth, 1).getDay();\r\n      const lastDayOfMonth = new Date(this.currentYear, this.currentMonth, daysInMonth).getDay();\r\n      \r\n      const weeks = [[]];\r\n      let currentWeek = 0;\r\n      let currentDay = 1;\r\n      for (let i = 0; i < firstDayOfMonth; i++) {\r\n        weeks[currentWeek].push(null);\r\n      }\r\n      while (currentDay <= daysInMonth) {\r\n        if (weeks[currentWeek].length === 7) {\r\n          currentWeek++;\r\n          weeks.push([]);\r\n        }\r\n        weeks[currentWeek].push(currentDay);\r\n        currentDay++;\r\n      }\r\n      for (let i = lastDayOfMonth; i < 6; i++) {\r\n        weeks[currentWeek].push(null);\r\n      }\r\n      \r\n      this.weeks = weeks;\r\n    },\r\n    prevMonth() {\r\n      this.currentMonth = (this.currentMonth - 1 + 12) % 12;\r\n      if (this.currentMonth === 11) {\r\n        this.currentYear--;\r\n      }\r\n      this.updateTable();\r\n    },\r\n    nextMonth() {\r\n      this.currentMonth = (this.currentMonth + 1) % 12;\r\n      if (this.currentMonth === 0) {\r\n        this.currentYear++;\r\n      }\r\n      this.updateTable();\r\n    },\r\n    handleDayClick(day) {\r\n      if (day === null) {\r\n        return;\r\n      }\r\n      this.selectedDay = day;\r\n      console.log(`You clicked day ${day} in month ${this.currentMonth}`);\r\n      // Add your own logic to update the UI or perform other actions based on the clicked day and month\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n.day-btn {\r\n  display: block;\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 8px;\r\n  border: none;\r\n  background-color: transparent;\r\n  cursor: pointer;\r\n}\r\n\r\n.day-btn:hover {\r\n  background-color: #ccc;\r\n}\r\n</style>"],"mappings":";;AAmCA;EACAA,IAAA,WAAAA,KAAA;IACA;MACAC,WAAA,MAAAC,IAAA,GAAAC,WAAA;MACAC,YAAA,MAAAF,IAAA,GAAAG,QAAA;MACAC,UAAA,GACA,wDACA,iEACA;MACAC,KAAA;MACAC,WAAA;IACA;EACA;EACAC,OAAA,WAAAA,QAAA;IACA,KAAAC,WAAA;EACA;EACAC,OAAA;IACAD,WAAA,WAAAA,YAAA;MACA,IAAAE,WAAA,OAAAV,IAAA,MAAAD,WAAA,OAAAG,YAAA,SAAAS,OAAA;MACA,IAAAC,eAAA,OAAAZ,IAAA,MAAAD,WAAA,OAAAG,YAAA,KAAAW,MAAA;MACA,IAAAC,cAAA,OAAAd,IAAA,MAAAD,WAAA,OAAAG,YAAA,EAAAQ,WAAA,EAAAG,MAAA;MAEA,IAAAR,KAAA;MACA,IAAAU,WAAA;MACA,IAAAC,UAAA;MACA,SAAAC,CAAA,MAAAA,CAAA,GAAAL,eAAA,EAAAK,CAAA;QACAZ,KAAA,CAAAU,WAAA,EAAAG,IAAA;MACA;MACA,OAAAF,UAAA,IAAAN,WAAA;QACA,IAAAL,KAAA,CAAAU,WAAA,EAAAI,MAAA;UACAJ,WAAA;UACAV,KAAA,CAAAa,IAAA;QACA;QACAb,KAAA,CAAAU,WAAA,EAAAG,IAAA,CAAAF,UAAA;QACAA,UAAA;MACA;MACA,SAAAC,EAAA,GAAAH,cAAA,EAAAG,EAAA,MAAAA,EAAA;QACAZ,KAAA,CAAAU,WAAA,EAAAG,IAAA;MACA;MAEA,KAAAb,KAAA,GAAAA,KAAA;IACA;IACAe,SAAA,WAAAA,UAAA;MACA,KAAAlB,YAAA,SAAAA,YAAA;MACA,SAAAA,YAAA;QACA,KAAAH,WAAA;MACA;MACA,KAAAS,WAAA;IACA;IACAa,SAAA,WAAAA,UAAA;MACA,KAAAnB,YAAA,SAAAA,YAAA;MACA,SAAAA,YAAA;QACA,KAAAH,WAAA;MACA;MACA,KAAAS,WAAA;IACA;IACAc,cAAA,WAAAA,eAAAC,GAAA;MACA,IAAAA,GAAA;QACA;MACA;MACA,KAAAjB,WAAA,GAAAiB,GAAA;MACAC,OAAA,CAAAC,GAAA,oBAAAC,MAAA,CAAAH,GAAA,gBAAAG,MAAA,MAAAxB,YAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}